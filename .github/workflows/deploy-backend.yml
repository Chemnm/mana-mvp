name: Deploy Backend to AWS App Runner

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: mana-mvp-backend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./backend
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Deploy to AWS App Runner
        run: |
          SERVICE_ARN="${{ secrets.APP_RUNNER_SERVICE_ARN }}"
          MAX_RETRIES=3
          RETRY_DELAY=15

          # Check initial status
          STATUS=$(aws apprunner describe-service --service-arn "$SERVICE_ARN" --query 'Service.Status' --output text)
          echo "Initial App Runner service status: $STATUS"

          # Resume if paused
          if [ "$STATUS" = "PAUSED" ]; then
            echo "Service is PAUSED. Resuming service..."
            aws apprunner resume-service --service-arn "$SERVICE_ARN"
            aws apprunner wait service-resumed --service-arn "$SERVICE_ARN"
            echo "Service resumed."
          elif [ "$STATUS" != "RUNNING" ]; then
            echo "Service is not in a valid state for deployment (must be RUNNING or PAUSED). Current status is $STATUS."
            echo "Please check the AWS App Runner console for more details."
            exit 1
          fi

          # Attempt deployment with retries
          for i in $(seq 1 $MAX_RETRIES); do
            echo "Attempt $i of $MAX_RETRIES: Starting deployment..."
            # By placing the command in an if condition, we prevent bash from exiting due to 'set -e'
            # and can handle the error gracefully.
            if DEPLOY_OUTPUT=$(aws apprunner start-deployment --service-arn "$SERVICE_ARN" 2>&1); then
              echo "Deployment started successfully."
              echo "$DEPLOY_OUTPUT"
              exit 0
            else
              # The command failed, capture the exit code and error output
              EXIT_CODE=$?
              DEPLOY_ERROR=$DEPLOY_OUTPUT
              echo "Deployment failed on attempt $i with exit code $EXIT_CODE."
              echo "Error details: $DEPLOY_ERROR"

              # Check for the specific transient error to decide whether to retry
              if [[ "$DEPLOY_ERROR" == *"InvalidRequestException"* && "$DEPLOY_ERROR" == *"isn't in RUNNING state"* ]]; then
                if [ $i -lt $MAX_RETRIES ]; then
                  echo "Retrying in $RETRY_DELAY seconds..."
                  sleep $RETRY_DELAY
                fi
              else
                echo "An unexpected, non-retriable error occurred. Halting."
                exit 1
              fi
            fi
          done

          echo "All deployment attempts failed."
          exit 1
